// The MIT License (MIT)
//
// Copyright (c) 2017 Darrell Wright
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files( the "Software" ), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#define BOOST_TEST_MODULE aoc_2017_day01
#include <daw/boost_test.h>

#include <cstdint>
#include <cstdlib>
#include <iostream>

#include "day01.h"

namespace daw {
	namespace aoc_2017 {
		namespace day01 {
			BOOST_AUTO_TEST_CASE( test_001 ) {
				BOOST_REQUIRE_EQUAL( 3, sum_values( "1122" ) );
			}

			BOOST_AUTO_TEST_CASE( test_002 ) {
				BOOST_REQUIRE_EQUAL( 3, sum_values( "1122" ) );
			}

			BOOST_AUTO_TEST_CASE( test_003 ) {
				BOOST_REQUIRE_EQUAL( 4, sum_values( "1111" ) );
			}

			BOOST_AUTO_TEST_CASE( test_004 ) {
				BOOST_REQUIRE_EQUAL( 0, sum_values( "1234" ) );
			}

			BOOST_AUTO_TEST_CASE( test_005 ) {
				BOOST_REQUIRE_EQUAL( 9, sum_values( "91212129" ) );
			}

			BOOST_AUTO_TEST_CASE( test_006 ) {
				static constexpr char const str[] =
				  "738576468625144447399791512378297253634373265751783467175946279546121378242834293189618169557899627432131741"
				  "924235953478395737293295377433633811848896717272765186249883819531765428979755868345851112699621795332281722"
				  "937237345586217784447844339183548459152523565186346489117792724495492582778679943653659256137426929947473832"
				  "129357538589943844655856924123627877977998358791243139547524479653888837328718692164742686623775673734273197"
				  "676395949914999631559158471612219918329527743987291137131392459448676647943854441741652974349511481982598452"
				  "443736722523418477261794252595496113697687532518272575476837268453197261445513452359633835537444427352211536"
				  "223873438316477812937662862149766296545676163179617835359962988766593952189244736121947964648397879839271611"
				  "979328271773952489738595827372677631815497767554628778987426533968875397718512933492971548638187528627852824"
				  "769646416229769169815471277558954194526357489726657599645554762553794792797249797933393211516515146274221632"
				  "732111629137239658561866447571532129812233578926294228457132841456937546438644682488255191884318519582954737"
				  "391548268753443294277831254275279831343462849829521669264671313724419812321953169355984891583462382591919153"
				  "265873542217696545174186966671487415849255644595485229916186865144812382582177536321924624451594639268627554"
				  "556198935557394692476744225346534275399576479192795115877123194417769246953149455969791117661394339625814182"
				  "224457845749836135238151816658758334223381698932954441562112739799672399739721967648696668472965376352576865"
				  "532444399112986212918121533994755525727959292125824664621576473669858321162588743617614925135645235821145834"
				  "343937468834111652972697243469732473452511419222964146422798658284547774174778767358884843971361932688962432"
				  "694455338678282163353877537191597389995929523292799674221892651437416894758244189273146299348187727771443688"
				  "759722387188114969322892844242761166465577233347189373593241993783293795349592951483766388393841664438734282"
				  "583667373377811948151442751245335762839666679154753181484417634269636241684299376191936999477989735734833419"
				  "7721735231299249116477";

				auto const s = sum_values( str );
				std::cout << "Answer 1 = " << s << '\n';
				BOOST_REQUIRE_EQUAL( 1171, s );
			}

			// Part 2
			BOOST_AUTO_TEST_CASE( test_007 ) {
				std::string const str = "1212";
				BOOST_REQUIRE_EQUAL( 6, sum_values( str, str.size( ) / 2 ) );
			}

			BOOST_AUTO_TEST_CASE( test_008 ) {
				std::string const str = "1221";
				BOOST_REQUIRE_EQUAL( 0, sum_values( str, str.size( ) / 2 ) );
			}

			BOOST_AUTO_TEST_CASE( test_009 ) {
				std::string const str = "123425";
				BOOST_REQUIRE_EQUAL( 4, sum_values( str, str.size( ) / 2 ) );
			}

			BOOST_AUTO_TEST_CASE( test_010 ) {
				std::string const str = "123123";
				BOOST_REQUIRE_EQUAL( 12, sum_values( str, str.size( ) / 2 ) );
			}

			BOOST_AUTO_TEST_CASE( test_011 ) {
				std::string const str = "12131415";
				BOOST_REQUIRE_EQUAL( 4, sum_values( str, str.size( ) / 2 ) );
			}

			BOOST_AUTO_TEST_CASE( test_012 ) {
				std::string const str =
				  "738576468625144447399791512378297253634373265751783467175946279546121378242834293189618169557899627432131741"
				  "924235953478395737293295377433633811848896717272765186249883819531765428979755868345851112699621795332281722"
				  "937237345586217784447844339183548459152523565186346489117792724495492582778679943653659256137426929947473832"
				  "129357538589943844655856924123627877977998358791243139547524479653888837328718692164742686623775673734273197"
				  "676395949914999631559158471612219918329527743987291137131392459448676647943854441741652974349511481982598452"
				  "443736722523418477261794252595496113697687532518272575476837268453197261445513452359633835537444427352211536"
				  "223873438316477812937662862149766296545676163179617835359962988766593952189244736121947964648397879839271611"
				  "979328271773952489738595827372677631815497767554628778987426533968875397718512933492971548638187528627852824"
				  "769646416229769169815471277558954194526357489726657599645554762553794792797249797933393211516515146274221632"
				  "732111629137239658561866447571532129812233578926294228457132841456937546438644682488255191884318519582954737"
				  "391548268753443294277831254275279831343462849829521669264671313724419812321953169355984891583462382591919153"
				  "265873542217696545174186966671487415849255644595485229916186865144812382582177536321924624451594639268627554"
				  "556198935557394692476744225346534275399576479192795115877123194417769246953149455969791117661394339625814182"
				  "224457845749836135238151816658758334223381698932954441562112739799672399739721967648696668472965376352576865"
				  "532444399112986212918121533994755525727959292125824664621576473669858321162588743617614925135645235821145834"
				  "343937468834111652972697243469732473452511419222964146422798658284547774174778767358884843971361932688962432"
				  "694455338678282163353877537191597389995929523292799674221892651437416894758244189273146299348187727771443688"
				  "759722387188114969322892844242761166465577233347189373593241993783293795349592951483766388393841664438734282"
				  "583667373377811948151442751245335762839666679154753181484417634269636241684299376191936999477989735734833419"
				  "7721735231299249116477";
				auto const s = sum_values( str, str.size( ) / 2 );
				std::cout << "Answer 2 = " << s << '\n';
				BOOST_REQUIRE_EQUAL( 1024, s );
			}
		} // namespace day01
	}   // namespace aoc_2017
} // namespace daw

